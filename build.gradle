buildscript {
    def projectsWithoutSourcesBuildScript = project(":${project.name}-cc-en_UK-robstoll")
    ext {
        atrium_version = '0.4.0-SNAPSHOT'
        ghPages_version = '0.4.0-SNAPSHOT'
        kbox_version = '0.0.1'
        kotlin_version = '1.1.51'
        mockito_kotlin_version = '1.0.1'
        dokka_version = '0.9.14'

        srcKotlin = 'src/main/kotlin'

        //spek.gradle
        jacoco_tool_version = '0.7.9'
        spek_version = '1.1.4'
        junit_version = '1.0.0-RC3'

        //publish.gradle
        bintray_version = '1.7.3'
        publish_pkg_name = project.name
        publish_vcsUrl = "https://github.com/robstoll/${project.name}.git"

        //gh-pages.gradle
        docProjects = subprojects.findAll { !it.name.startsWith("${project.name}-core-impl") }

        //jacoco-multi-project.gradle
        projectsWithoutSources = projectsWithoutSourcesBuildScript
        jacocoMulti = [
            sourceProjects:
                subprojects.findAll {
                    // cannot be part of the sources since it would define AtriumFactory twice
                    // (atrium-impl-robstoll already defines it)
                    it.name != "${project.name}-core-api-late-binding" &&
                        // would have two classes with the same name if we add it as project as well,
                        // (clashes with "${project.name}-translations-en_UK"
                        it.name != "${project.name}-translations-de_CH" &&
                        // does not make sense to listen specs in coverage
                        it.name != "${project.name}-spec"
                } - projectsWithoutSourcesBuildScript,
            jacocoProjects:
                subprojects.findAll {
                    it.name != "${project.name}-core-api" &&
                        it.name != "${project.name}-core-api-late-binding" &&
                        it.name != "${project.name}-core-impl-robstoll" &&
                        it.name != "${project.name}-spec" &&
                        it.name != "${project.name}-translations-de_CH" &&
                        it.name != "${project.name}-translations-en_UK"
                } - projectsWithoutSourcesBuildScript
        ]
    }

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
    }
}

repositories {
    mavenCentral()
}

subprojects {
    repositories {
        mavenCentral()
        maven { url "http://dl.bintray.com/robstoll/tutteli-jars" }
    }

    apply plugin: 'kotlin'

    dependencies {
        compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        compile "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    }
}

def projectsWithSources = subprojects - projectsWithoutSources
configure(projectsWithSources) {
    apply plugin: 'org.jetbrains.dokka'

    dokka {
        outputFormat = 'html'
        outputDirectory = "$buildDir/kdoc"
        linkMapping {
            dir = "$srcKotlin"
            url = "https://github.com/robstoll/${project.name}/tree/master/${project.name}/$srcKotlin"
            suffix = '#L'
        }
        linkMapping {
            dir = "../${project.name}-core-api/$srcKotlin"
            url = "https://github.com/robstoll/${project.name}/tree/master/${project.name}-core-api/$srcKotlin"
            suffix = '#L'
        }

        sourceDirs = files(
            srcKotlin,
            "../${rootProject.name}-core-api/$srcKotlin",
            "../${rootProject.name}-core-api-late-binding/$srcKotlin")
    }

    task sourceJar(type: Jar) {
        from project.sourceSets.main.allSource
        classifier 'sources'
    }

    task javadocJar(type: Jar, dependsOn: dokka) {
        from dokka.outputDirectory
        classifier = 'javadoc'
    }

    afterEvaluate {
        it.ext.publish_artifacts = [sourceJar, javadocJar]
    }
}

configure(projectsWithoutSources) {
    afterEvaluate {
        it.ext.publish_artifacts = []
    }
}

// has to be after the above two blocks which define `it.ext.publish_artifacts`
subprojects {
    afterEvaluate { subproject ->
        subproject.ext {
            publish_artifactId = subproject.name
            publish_version = atrium_version
        }
        apply from: './gradle/scripts/publish.gradle', to: subproject
    }
}

configure(jacocoMulti.jacocoProjects) {
    apply from: '../gradle/scripts/spek.gradle'

    dependencies {
        testCompile("com.nhaarman:mockito-kotlin:$mockito_kotlin_version") {
            exclude group: 'org.jetbrains.kotlin'
        }
    }
}


apply from: 'gradle/scripts/jacoco-multi-project.gradle'
apply from: 'gradle/scripts/gh-pages.gradle'

/*

Release & deploy a commit
--------------------------------
1. change atrium_version and ghPages_version in build.gradle
2. update github pages:
    a) gr ghPages
    b) change version number in atrium-gh-pages/latest/index.html
    c) add new version to atrium-gh-pages/README.md
    d) commit & push changes
3. update master:
    a) update README.md:
        1) search for old version and replace with new (gradle and maven examples)
        2) search for `branch=master` and replace it with `tag=vX.Y.Z` (build status and coverage)
    b) commit (modified build.gradle and README.md)
    c) git tag vX.Y.Z
    d) push to origin
4. deploy to bintray:
    a) gr bintrayUpload
    b) Log in to bintray, check and publish new jars
5. create release on github

Prepare next dev cycle
-----------------------
1. change atrium_version in build.gradle to X.Y.Z-SNAPSHOT
2. update README.md, search for `tag=vX.Y.Z` and replace it with branch=master
3. commit & push changes

*/
